import{_ as i,c as a,a0 as t,o as e}from"./chunks/framework.C1tv1HY1.js";const o=JSON.parse('{"title":"git单模板多项目的探索","description":"我在用单模板进行多项目开发的尝试和探索","frontmatter":{"title":"git单模板多项目的探索","description":"我在用单模板进行多项目开发的尝试和探索","image":"https://picsum.photos/536/354?random&date=2020-10-23","date":"2020-10-23T00:00:00.000Z","vssue-title":"git-template-project","tags":["git"],"categories":["summary"]},"headers":[],"relativePath":"posts/git-template-project.md","filePath":"posts/git-template-project.md","lastUpdated":1729819822000}'),p={name:"posts/git-template-project.md"};function l(h,s,n,k,r,d){return e(),a("div",null,s[0]||(s[0]=[t(`<p>我在用单模板进行多项目开发的尝试和探索</p><h2 id="起因" tabindex="-1">起因 <a class="header-anchor" href="#起因" aria-label="Permalink to &quot;起因&quot;">​</a></h2><p>由于工作需要经常写后台管理界面，由于除了新管理后台界面新增的业务，其它大多数东西都是通用的。最初开发的时候就新建一个分支，然后进行新业务的开发。然后随着后面项目变多，各种缺点就暴露出来了。</p><h2 id="多分支开发" tabindex="-1">多分支开发 <a class="header-anchor" href="#多分支开发" aria-label="Permalink to &quot;多分支开发&quot;">​</a></h2><p>如果你只需要对少数项目开发，且不需要同时开发时，多分支开发还是比较实用的方式。</p><p>在不同的分支开发不同的项目的业务逻辑，相互不影响。但无法对多个分支同时操作，对公共部分的修改也得复制到多个分支。</p><h2 id="多仓库开发" tabindex="-1">多仓库开发 <a class="header-anchor" href="#多仓库开发" aria-label="Permalink to &quot;多仓库开发&quot;">​</a></h2><p>多仓库间相互间完全没有影响，不存在多分支的问题。但也没有关联，这也不是我想要的。</p><p>于是后面就想到创建一个模板仓库 <code>template</code>，在这个仓库里面对公共的模板进行开发。然后新建的项目就克隆这个仓库进行开发，根据需要同步 <code>template</code> 仓库的变动即可。</p><h3 id="上手" tabindex="-1">上手 <a class="header-anchor" href="#上手" aria-label="Permalink to &quot;上手&quot;">​</a></h3><ol><li><p>对 <code>template</code> 仓库的开发就和普通开发流程一样，但建议在 <code>README.md</code> 中增加对使用的说明。</p></li><li><p>克隆 <code>template</code> 并配置好对 <code>template</code> 仓库的依赖以便于对新项目的开发。</p></li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> template.git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> project</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # template.git-为 template 的仓库地址；project-为子项目文件夹名称，防止重名</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> project</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rename</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> template</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 将现在的远程地址重命名为 template</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> template</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 创建 template 分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 切换回主分支</span></span></code></pre></div><ol start="3"><li><p>然后新项目的业务就基于 <code>master</code> 分支开发。</p></li><li><p>绑定子项目的远程分支，如果不想提交到远程可以忽略。</p></li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> project.git</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # project.git-子项目的远程仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 推送 master 到远程</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> template:template</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 推送 template 到远程 template 分支</span></span></code></pre></div><ol start="5"><li>同步 <code>template</code> 仓库的变动。</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> template</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 切换到 template 分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> template</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> template</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 同步 template 仓库的变动</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 切换回 master 分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rebase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> template</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 将 template 变动合并到 master 分支</span></span></code></pre></div>`,16)]))}const g=i(p,[["render",l]]);export{o as __pageData,g as default};
