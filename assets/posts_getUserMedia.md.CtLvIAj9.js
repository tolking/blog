import{_ as i,c as a,a0 as e,o as t}from"./chunks/framework.C1tv1HY1.js";const g=JSON.parse('{"title":"getUserMedia 使用踩坑","description":"记录在使用 getUserMedia 时遇到的问题","frontmatter":{"title":"getUserMedia 使用踩坑","display":"home","description":"记录在使用 getUserMedia 时遇到的问题","image":"https://picsum.photos/536/354?random&date=2023-12-31","date":"2023-12-31T00:00:00.000Z","vssue-title":"getUserMedia","tags":["getUserMedia"],"categories":["summary"]},"headers":[],"relativePath":"posts/getUserMedia.md","filePath":"posts/getUserMedia.md","lastUpdated":1729775426000}'),n={name:"posts/getUserMedia.md"};function h(l,s,k,p,d,r){return t(),a("div",null,s[0]||(s[0]=[e(`<p>记录在使用 getUserMedia 时遇到的问题</p><h2 id="什么是-getusermedia" tabindex="-1">什么是 getUserMedia <a class="header-anchor" href="#什么是-getusermedia" aria-label="Permalink to &quot;什么是 getUserMedia&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaDevices/getUserMedia" target="_blank" rel="noreferrer">MediaDevices.getUserMedia</a> 是一个由浏览器提供的可以调用用户摄像头和麦克风的 API，可以用来获取用户的媒体流。通过这个API可以实现拍照、录像、音视频通话、人脸认证前端显示界面、纯前端实现二维码识别等功能。</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">video</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;video&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> preload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auto&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> playsinline</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> webkit-playsinline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> autoplay</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loop</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> muted</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> /</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">navigator.mediaDevices</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUserMedia</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    audio: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    video: { width: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1920</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, facingMode: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">stream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 将这个 stream 赋值到 video，开始播放 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> video</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;video&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    video.srcObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mediaStream</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    video.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onloadedmetadata</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      video.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">play</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* 返回的 err.name 可以判断用户是否拒绝 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span></code></pre></div><h2 id="踩坑" tabindex="-1">踩坑 <a class="header-anchor" href="#踩坑" aria-label="Permalink to &quot;踩坑&quot;">​</a></h2><ul><li>在使用 getUserMedia 时需要 https 协议，如果没有就会报错。</li><li>配置 video 的 width 和 height，其值是和屏幕显示相反的。</li><li>在指定 video 的 width 和 height 后，浏览器会调用最接近分辨率的摄像头。但用户可能有多个摄像头，这时候可以通过 <code>navigator.mediaDevices.enumerateDevices()</code> 来获取摄像头列表，然后通过 <code>deviceId</code> 来指定摄像头。</li><li>当调用前置摄像头时，video 显示的视频不是镜像的效果，这时可以通过 css <code>transform: scaleX(-1)</code> 翻转。</li><li>尽管支付宝内置浏览器是基于 <code>chrome 69</code> 的，但安卓手机却不支持调用 getUserMedia。</li><li>在 ios 上，微信和支付宝内置浏览器都可能遇到调用失败的情况。这时候需要确保 <code>video</code> 上配置有 <code>playsinline</code> 属性；然后在第一次调用摄像头后终止 stream，再重新调用一次，这时候就可以正常调用了。</li></ul>`,8)]))}const o=i(n,[["render",h]]);export{g as __pageData,o as default};
